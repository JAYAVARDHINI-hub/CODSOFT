#include
#include
#include

using namespace std;

// Constants
const int MAX_STUDENTS = 20;
const int MAX_BOOKS = 15;
const int MAX_NAME_LENGTH = 50;

// Global variables
int student_count = 0;
int book_count = 0;
double student_balance[MAX_STUDENTS];
int student_roll[MAX_STUDENTS];
char student_name[MAX_STUDENTS][MAX_NAME_LENGTH];
char book_title[MAX_BOOKS][MAX_NAME_LENGTH];
char book_author[MAX_BOOKS][MAX_NAME_LENGTH];
int book_isbn[MAX_BOOKS];
bool book_available[MAX_BOOKS];

// Function prototypes
void create_account();
void display(int roll);
void deposit_amount(int roll, double amount);
void issue_item(int roll);
void display_sorted();
int find_student(int roll);
int find_book(int isbn);
void add_book();
void edit_book();
void view_books();

int main() {
    // Initialization
    // Add initial 15 books to the library
    // TODO: Replace with actual book data
    for (int i = 0; i &lt; MAX_BOOKS; i++) {
        strcpy(book_title[i], &quot;Title&quot;);
        strcpy(book_author[i], &quot;Author&quot;);
        book_isbn[i] = i + 1000;
        book_available[i] = true;
    }
    book_count = MAX_BOOKS;

    int option;
    bool is_admin;
    string password;

    while (true) {
        cout &lt;&gt; option;

        if (option == 0) {
            break;
        }

        is_admin = (option == 1);

        cout &lt;&gt; password;

        if (password == "password") { // Use a simple password for demonstration purposes.
            if (is_admin) {
                cout &lt;&gt; option;

                switch (option) {
                    case 1: {
                        add_book();
                        break;
                    }
                    case 2: {
                        edit_book();
                        break;
                    }
                    case 3: {
                        view_books();
                        break;
                    }
                    case 4: {
                        display_sorted();
                        break;
                    }
                    case 5: {
                        int roll;
                        cout &lt;&gt; roll;
                        display(roll);
                        break;
                    }
                }
            } else {
                int roll;
                cout &lt;&gt; roll;

                int index = find_student(roll);
                if (index == -1) {
                    cout &lt;&gt; option;
                    if (option == 1) {
                        create_account();
                    }
                } else {
                    cout &lt;&gt; option;

                    switch (option) {
                        case 1: {
                            display(roll);
                            break;
                        }
                        case 2: {
                            double amount;
                            cout &lt;&gt; amount;
                            deposit_amount(roll, amount);
                            break;
                        }
                        case 3: {
                            issue_item(roll);
                            break;
                        }
                    }
                }
            }
        } else {
            cout &lt;= MAX_STUDENTS) {
cout &lt;&lt; &quot;Student limit reached. Cannot create more accounts.\n&quot;;
return;
}

int roll;
cout &lt;&gt; roll;

if (find_student(roll) != -1) {
    cout &lt;&lt; &quot;Account already exists for this roll number.\n&quot;;
    return;
}

student_roll[student_count] = roll;
cout &lt;&lt; &quot;Enter student name: &quot;;
cin.ignore();
cin.getline(student_name[student_count], MAX_NAME_LENGTH);

double initial_deposit;
cout &lt;&gt; initial_deposit;

if (initial_deposit &lt; 50) {
    cout &lt;&lt; &quot;Initial deposit must be at least $50.\n&quot;;
    return;
}

student_balance[student_count] = initial_deposit - 20 - 30; // Account opening and security deposit
student_count++;
}

void display(int roll) {
int index = find_student(roll);
if (index == -1) {
    cout &lt;&lt; &quot;Student not found.\n&quot;;
    return;
}

cout &lt;&lt; &quot;Roll No: &quot; &lt;&lt; student_roll[index] &lt;&lt; endl;
cout &lt;&lt; &quot;Name: &quot; &lt;&lt; student_name[index] &lt;&lt; endl;
cout &lt;&lt; &quot;Balance: $&quot; &lt;&lt; fixed &lt;&lt; setprecision(2) &lt;&lt; student_balance[index] &lt;&lt; endl;
}

void deposit_amount(int roll, double amount) {
int index = find_student(roll);
if (index == -1) {
    cout &lt;&lt; &quot;Student not found.\n&quot;;
    return;
}

student_balance[index] += amount;
cout &lt;&lt; &quot;New balance: $&quot; &lt;&lt; fixed &lt;&lt; setprecision(2) &lt;&lt; student_balance[index] &lt;&lt; endl;
}

void issue_item(int roll) {
int index = find_student(roll);
if (index == -1) {
    cout &lt;&lt; &quot;Student not found.\n&quot;;
    return;
}

cout &lt;&lt; &quot;Available books:\n&quot;;
for (int i = 0; i &lt; book_count; i++) {
    if (book_available[i]) {
        cout &lt;&lt; i + 1 &lt;&lt; &quot;. &quot; &lt;&lt; book_title[i] &lt;&lt; &quot; by &quot; &lt;&lt; book_author[i] &lt;&lt; &quot; (ISBN: &quot; &lt;&lt; book_isbn[i] &lt;&lt; &quot;)\n&quot;;
    }
}

int choice;
cout &lt;&gt; choice;

if (choice == 0) {
    return;
}

if (book_available[choice - 1] &amp;&amp; student_balance[index] &gt;= 2) {
    book_available[choice - 1] = false;
    student_balance[index] -= 2;
    cout &lt;&lt; &quot;Book issued successfully. New balance: $&quot; &lt;&lt; fixed &lt;&lt; setprecision(2) &lt;&lt; student_balance[index] &lt;&lt; endl;
} else {
    cout &lt;&lt; &quot;Cannot issue the book. Insufficient balance or book is unavailable.\n&quot;;
}
}

void display_sorted() {
for (int i = 0; i &lt; student_count; i++) {
for (int j = i + 1; j  student_roll[j]) {
swap(student_roll[i], student_roll[j]);
swap(student_balance[i], student_balance[j]);
swap(student_name[i], student_name[j]);
}
}
}

for (int i = 0; i &lt; student_count; i++) {
    cout &lt;&lt; student_roll[i]&lt;&lt; &quot; - &quot; &lt;&lt; student_name[i] &lt;&lt; &quot; - Balance: $&quot; &lt;&lt; fixed &lt;&lt; setprecision(2) &lt;&lt; student_balance[i] &lt;&lt; endl;
}
}

int find_student(int roll) {
for (int i = 0; i &lt; student_count; i++) {
if (student_roll[i] == roll) {
return i;
}
}
return -1;
}

int find_book(int isbn) {
for (int i = 0; i = MAX_BOOKS) {
cout &lt;&lt; &quot;Book limit reached. Cannot add more books.\n&quot;;
return;
}
cout &lt;&lt; &quot;Enter book title: &quot;;
cin.ignore();
cin.getline(book_title[book_count], MAX_NAME_LENGTH);

cout &lt;&lt; &quot;Enter book author: &quot;;
cin.getline(book_author[book_count], MAX_NAME_LENGTH);

int isbn;
cout &lt;&gt; isbn;

if (find_book(isbn) != -1) {
    cout &lt;&lt; &quot;A book with this ISBN already exists.\n&quot;;
    return;
}

book_isbn[book_count] = isbn;
book_available[book_count] = true;
book_count++;
}

void edit_book() {
int isbn;
cout &lt;&gt; isbn;
int index = find_book(isbn);
if (index == -1) {
    cout &lt;&lt; &quot;Book not found.\n&quot;;
    return;
}

cout &lt;&lt; &quot;Current book title: &quot; &lt;&lt; book_title[index] &lt;&lt; endl;
cout &lt;&lt; &quot;Enter new book title: &quot;;
cin.ignore();
cin.getline(book_title[index], MAX_NAME_LENGTH);

cout &lt;&lt; &quot;Current book author: &quot; &lt;&lt; book_author[index] &lt;&lt; endl;
cout &lt;&lt; &quot;Enter new book author: &quot;;
cin.getline(book_author[index], MAX_NAME_LENGTH);

cout &lt;&lt; &quot;Book details updated.\n&quot;;
}

void view_books() {
for (int i = 0; i &lt; book_count; i++) {
cout &lt;&lt; &quot;Title: &quot; &lt;&lt; book_title[i] &lt;&lt; endl;
cout &lt;&lt; &quot;Author: &quot; &lt;&lt; book_author[i] &lt;&lt; endl;
cout &lt;&lt; &quot;ISBN: &quot; &lt;&lt; book_isbn[i] &lt;&lt; endl;
cout &lt;&lt; &quot;Available: &quot; &lt;&lt; (book_available[i] ? &quot;Yes&quot; : &quot;No&quot;) &lt;&lt; endl &lt;&lt; endl;
}
}

OUTPUT:
Login as:
1. Admin
2. Student
0. Exit
1
Enter password: 123
Incorrect password.
Login as:
1. Admin
2. Student
0. Exit
2
Enter password: password
Enter your roll number: 1
Student not found. Create an account? (1. Yes / 2. No):





